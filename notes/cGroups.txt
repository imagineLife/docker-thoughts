KERNEL FEAT 3: CGroups
invented @ google
THE PROBLEM
- running multiple processes
    - (web-servers, not separate vms)
- BUT if google-maps team writes a bad process, might kill other google process

THE SOLUTION
- NEEDED to control how much cpu each process gets

HERE, this reviewes ram && cpu. but theres much more.


RUN THIS 
apt-get install -y cgroup-tools htop

#CGroup
https://wiki.archlinux.org/index.php/cgroups

#htop
https://hisham.hm/htop/

CHECK OUT HTOP
enter htop into the terminal, its a 'gui' of processes running on the computer :) interesting!


creat a new control-group
cgcreate -g cpu,memory,blkio,devices,freezer:/sandbox

re-enter an unshared environment
cgcreate -g cpu,memory,blkio,devices,freezer:/sandbox
root@e99d8cb3b537:/better-root# unshare --mount --uts --ipc --net --pid --fork --user --map-root-user chroot /better-root bash

enter the HOST container
start another terminal
- new terminal
- docker container ls
docker exec -it docer-host /bin/bash


find the bash process of the child container, enter this in terminal 
ps aux
...show ALL processes, even child processes
- the 'bash' command, under the COMMAND column, directly below the unshare... command, is the child process we want. Find the Process id under the PID column (7501 or something)


assign all processes inside this un-shared child TO a control-group, entering this command in the PARENT container
cgclassify -g cpu,memory,blkio,devices,freezer:sandbox 7501

SEE that the process is attached to a cgroup 
cat sys/fs/cgroup/cpu/sandbox/tasks
NOW, the process is classified under the control-group


SEE what kind of resources this control-group has access to...
cat sys/fs/cgroup/cpu/sandbox/cpu.shares
... should show 1024...?! shows that this is a low-priority control-grooup

SET the c-group to ONLY use 5% of processing power
cgset -r cpu.cfs_period=100000 -r cpu.cfs_quota_us=$[ 5000 * $(getconf _NPROCESSORS_ONLN) ] sandbox

SET the c-group max memory allotted to 80Megabytes
cgset -r memory.limit_in_bytes=80M sandbox

SEE allotted memory
cgget -r memory.stat sandbox
...should output something like...
sandbox:
memory.stat: cache 0
	rss 0
	rss_huge 0
	shmem 0
	mapped_file 0
	dirty 0
	writeback 0
	swap 0
	pgpgin 0
	pgpgout 0
	pgfault 0
	pgmajfault 0
	inactive_anon 0
	active_anon 0
	inactive_file 0
	active_file 0
	unevictable 0
	hierarchical_memory_limit 83886080
	hierarchical_memsw_limit 9223372036854771712
	total_cache 0
	total_rss 0
	total_rss_huge 0
	total_shmem 0
	total_mapped_file 0
	total_dirty 0
	total_writeback 0
	total_swap 0
	total_pgpgin 0
	total_pgpgout 0
	total_pgfault 0
	total_pgmajfault 0
	total_inactive_anon 0
	total_active_anon 0
	total_inactive_file 0
	total_active_file 0
	total_unevictable 0

NOTICE the hierarchical_memory_limit is 83....
this is the 80 mb I alotted



